//@Dev GovernmentLedger Implementation Start NB any modifications that relate to the Government ledger should be made between here and the end see bottom comment  
mapping(address => Person) People; //@Used to store every resident that lives in South Africa
function RegisterPerson(string name,string sname,string lat,string long,address id) returns (string message)
{
    if(id==address(0))
    {
     message = "Invalid Address";
     emit GeneralLogger(message);
     return message;
    }
    if(isStringNullorEmpty(name)||isStringNullorEmpty(sname)||isStringNullorEmpty(lat) || isStringNullorEmpty(long))
    {
        message="Please Enter all required information";
        emit GeneralLogger(message);
        return message;
    }
    Address memory hAddress = Address(lat,long);  
    PurchaseToken(id);
    People[id]=Person(id,name,sname,hAddress,GetLatestTokenIndex(id),true,true);
    message="Registered Citizen Succesfully";
    emit GeneralLogger(message);
}
//@Dev updates the specified Persons details using the address
function UpdatePersonName(string name,address id) returns (string message)
{
    if(id== address(0))
    {
        message ="Invalid address";
        emit GeneralLogger(message);
        return message;
    }
    if(isStringNullorEmpty(name))
    {
        message="Name cannot be empty";
        emit GeneralLogger(message);
        return message;
    }
    else if(!People[id].Activated || !People[id].Alive)
    {
        message="User is Deceased or is not an resident of the country";
        emit GeneralLogger(message);
        return message;
    }
    People[id].Name=name;
    message="Citizens name updated";
    emit GeneralLogger(message);
}

//@Dev updates the specified Persons details using the address
function UpdatePersonSurname(string sname,address id) returns (string message)
{
    if(id== address(0))
    {
        message ="Invalid address";
        emit GeneralLogger(message);
        return message;
    }
    if(isStringNullorEmpty(sname))
    {
        message="Surname cannot be empty";
        emit GeneralLogger(message);
        return message;
    }
    else if(!People[id].Activated|| !People[id].Alive)
    {
        message="User is Deceased or is not a resident of the country";
        emit GeneralLogger(message);
        return message;
    }
    People[id].Surname=sname;
    message="Citizens Surname updated";
    emit GeneralLogger(message);
}

//@Dev checks if a specifc resident exists or not
function CitizenExists(address id) view returns (bool exists)
{
    require(id != address(0));
    emit BooleanLogger(People[id].Activated&&People[id].Alive);
    return People[id].Activated&&People[id].Alive?true:false;
}

//@Dev Gets the specfied Person using the given
function GetPersonInternal(address id) view returns  (string name,string sname,address Id)
{
  if(id==address(0))
  {
    return ("Invalid address","",id);
    emit GeneralLogger("Invalid address");
  } 
  if(!People[id].Activated)
  {
    return ("Person does not exist","",id);
    emit GeneralLogger("Person does not exist");
  }  
  name=People[id].Name;
  sname=People[id].Surname;
  Id=People[id].ID;

}
//@Dev Gets the specfied Person using the given used by external contracts
//Passing of strings between smart contracts not permitted
function GetPerson(address id) view returns  (bytes32 name,bytes32 sname,address Id)
{
  if(id==address(0))
  {
    emit GeneralLogger("Invalid address");
    return ("Invalid address","",id);
  } 
  if(!People[id].Activated)
  {
    emit GeneralLogger("Person does not exist");
    return ("Person does not exist","",id);
  }  
  name=stringToBytes32(People[id].Name);
  sname=stringToBytes32(People[id].Surname);
  Id=People[id].ID;
}
//@Dev End Government Ledger Implementation
 
//@Dev Health Institution Implementation Ledger Start


mapping(address => Institution) Institutions; //@Used to store every resident that lives in South Africa

//@Dev Registers a Health institution
function RegisterHealthInstitution(string name,string lat,string long,address id) returns (string message)
{
    if(id==address(0))
    {
     message = "Invalid Address";
     emit GeneralLogger(message);
     return message;
    }
    if(isStringNullorEmpty(name)||isStringNullorEmpty(lat) || isStringNullorEmpty(long))
    {
        message="Please Enter all required information";
        emit GeneralLogger(message);
        return message;
    }
    Address memory hAddress = Address(lat,long);  
    PurchaseToken(id);
    Institutions[id]=Institution(id,name,hAddress,GetLatestTokenIndexHealthInstitution(id),true);
    message="Registered Institution Succesfully";
    emit GeneralLogger(message);
    return message;
}

//@Dev Gets the specfied Person using the given used by external contracts
//Passing of strings between smart contracts not permitted
function GetInstitution(address id) view returns  (bytes32 name,address Id)
{
  if(id==address(0))
  {
    emit GeneralLogger("Invalid address");
    return ("Invalid address",id);
  } 
  if(!Institutions[id].Activated)
  {
    emit GeneralLogger("HealthInstitution does not exist");
    return ("HealthInstitution does not exist",id);
  }  
  name=stringToBytes32(Institutions[id].Name);
  Id=Institutions[id].ID;
}

//@Dev Health Institution Ledger End

//@Dev Insurance Holder Ledger Start

 mapping(address=> Holder) Holders;

//@Dev registers a new Insurance Holder onto the system
//NB: Users are checked against the Government database
function RegisterHolder(uint256 intialcover,address id) returns (string message)
{
  if(id==address(0))//@Dev make sure the user is not the 0th account burner account if thats the case revert transaction 
  {
      message = "Invalid Address";
      emit GeneralLogger(message);
      return message;
  }
  if(!CitizenExists(id))
  {
      message="User is not a resident of South Africa";
      emit GeneralLogger(message);
      return message;
  }
  if(Holders[id].Activated)
  {
    message ="User already registered";
    emit GeneralLogger(message);
    return message;
  } 
  if(intialcover <0)
  {
    intialcover=0;
  }
  else
  {
    Holder memory temp =Holder(id,true,0,0,intialcover,false);
    Holders[id]=temp;
    message="Successfully registered User";
    emit GeneralLogger(message);
    return message;
  }
}

//@Dev removes the specified doctor
function Archive(address id) returns (string message)
{
    if(id==address(0))
    {
        message="Invalid address";
        emit GeneralLogger(message);
        return message;
    }
    else if(!Holders[id].Activated)
    {
     message="Holder does not exist";
     emit GeneralLogger(message);
     return message;
    }
     Holders[id].Archived=true;
    message="Holder archived";
    emit GeneralLogger(message);
}
//@Dev allows user to add money to they cover plan N.B. payable to allow users to transfer ether
function PayCover(address holderId,uint256 amount) payable returns (string message)
{
     if(holderId== address(0))
     {
         message="Invalid address";
         emit GeneralLogger(message);
         return message;
     }
     if(amount <0)
     {
         message="Invalid payment";
         emit GeneralLogger(message);
         return message;
     }
     if(!Holders[holderId].Activated)
     {
         message="Insurance Holder does not exist";
         emit GeneralLogger(message);
         return message;
     }
     Holders[holderId].AmountCoveredFor += amount;
     message="Payment for insurance cover succesfull";
     emit GeneralLogger(message);
}

//@Dev Inusurance Holder Ledger End


//@Dev Insurance Claim Ledger Start
mapping(uint256 => Claim) Claims;//@Dev Keeps track of all claims paidout
    uint256 TotalClaims=0;

    function AddClaim(uint256 amount,address claimerId) payable returns (string message)
    {
     if(claimerId == address(0))
     {
         message ="Invalid Claimer ID";
         emit GeneralLogger(message);
         return message;
     }    
     if(amount <0)
     {
         message="Amount cannot be negative";
        emit GeneralLogger(message);
         return message;
     }
     Claims[TotalClaims++]=Claim(claimerId,amount);
     message="Succesfully paid out claim";
     emit GeneralLogger(message);
     return message;
    }

//@Dev Insurance Claim Ledger End


//@Dev Medical Record Ledger Start
mapping (uint256 => Record) Records;//@Dev keeps track of every record submitted
 mapping(address=> Patient) PatientRecords; //@Dev Keeps track of patient records
 uint256 RecordCount; //@Dev keeps track of how many Records have been registered

function AddNewRecord(string exam,address docsId,address pId,uint256 cost,string Type) returns (string message) 
{
 if(isStringNullorEmpty(exam))
 {
     message ="Description cannot be empty";
     emit GeneralLogger(message);
     return message;
 }
 if(isStringNullorEmpty(Type))
 {
     message="Examination type cannot be empty";
    emit GeneralLogger(message);
     return message;
 }
 if(docsId == address(0))
 {
     message="Invalid Doctors Id";
    emit GeneralLogger(message);
     return message;
 }
 if(cost <0)
 {
     message="Examination cost cannot be less than zero";
    emit GeneralLogger(message);
     return message;
 }
 if(docsId != address(0))
 {
    message="Invalid Doctor Address";
    emit GeneralLogger(message);
    return message;
 }
 else if(pId ==address(0))
 {
     message="Invalid patients ID";
     emit GeneralLogger(message);
     return message;
 }
 address temp=docsId;
 bool active=DoctorExist(docsId);
 if(!active)
 {
    message="Doctor does not exist";
    emit GeneralLogger(message);
    return message;
 }
 Records[RecordCount++]=Record(docsId,pId,exam,cost,Type);
 message="Added Patient Examination succesfully";
 emit GeneralLogger(message);
}
//@Dev Fetches a specific patients record Note: function is of type pure as a way of indicating to the compiler that
//we are in no way modifying the state of the records 
function GetPatientRecord(address id) view returns  (string,bytes32 [] recs,bytes32 [])
{
 if(address(0)== id)
 {
     emit GeneralLogger("Invalid Patient Address");
     return ("Invalid Patient Address",recs,recs);
 }
 else if(PatientRecords[id].Count==0)
 {
     emit GeneralLogger("Patient has no records");
     return ("Patient has no records",recs,recs);
 }
 bytes32 [] memory temprecords = new bytes32 [](PatientRecords[id].Count);
  bytes32 [] memory temprecords2 = new bytes32 [](PatientRecords[id].Count);
 for(uint256 i=0; i < PatientRecords[id].Count;i++)
 {
   temprecords[i]=stringToBytes32(PatientRecords[id].PRecords[i].Examination);
   temprecords2[i]=stringToBytes32(PatientRecords[id].PRecords[i].Type);
 }
 return ("Patient records found",temprecords,temprecords2);
 emit GeneralLogger("Patient records found");
}
//@Dev returns medical records conducted by specified doctor
//Used for auditing purposes.
function GetExaminationsConductedByDoctor(address id) view returns  (string,bytes32 [] recs,bytes32 [])
{
 if(address(0)== id)
 {
    emit GeneralLogger("Invalid Doctor Address");
     return ("Invalid Doctor Address",recs,recs);
 }
 bytes32 [] memory temprecords = new bytes32 [](100);
 bytes32 [] memory temprecords2 = new bytes32 [](100);
 uint tempcount=0;
 for(uint256 i=0; i < temprecords.length;i++)
 {
   if(Records[i].DoctorID==id)
   {
     temprecords[tempcount++]=stringToBytes32(Records[i].Examination);
     temprecords2[tempcount++]=stringToBytes32(Records[i].Type);
   }
 }
 emit GeneralLogger("Doctors records found");
 return ("Doctors records found",temprecords,temprecords2);
}

//@Dev Medical Record Ledger End


//@Dev Doctor Contract Ledger Start


 //@Dev Indexes all doctors regiterd 
 mapping(address => Doctor) Doctors;
 //TODO
 //Register doctor
 //Delete doctor
 //Update doctors details
 //Get doc details
 //

//@Dev registers a doctor onto the smartcontracts db
//Each doctor is linked to an ERC721 Token which enforce uniqueness
function RegisterDoctor(address id) returns (string message)
{
    if(id== address(0))
    {
        message="Invalid address";
        emit GeneralLogger(message);
        return message;
    }
    if(Doctors[id].Activated)
    {
        message = "Doctor Already registered";
        emit GeneralLogger(message);
        return message;
    }
    PurchaseTokenDoctor(id);
    Doctors[id]=Doctor(id,GetLatestTokenIndexDoctor(id),true);
    message="Successfully registered doctor";
    emit GeneralLogger(message);
    return message;
}


//@Dev Gets the specfied doctor using the given
function DoctorExist(address id) view returns  (bool active)
{
  if(id==address(0))
  {
    emit GeneralLogger("Invalid address");
    return false;
  } 
  if(!Doctors[id].Activated)
  {
    emit GeneralLogger("Doctor does not exist");
    return false;
  }  
  return Doctors[id].Activated;
}


//@Dev Doctor Contract End
